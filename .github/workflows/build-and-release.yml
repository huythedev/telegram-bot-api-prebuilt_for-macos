name: Build and Release Telegram Bot API for macOS (Docker)

on:
  schedule:
    - cron: '0 0 * * 0' # Run weekly on Sunday at 00:00 UTC
  workflow_dispatch: # Allow manual trigger
  repository_dispatch:
    types: [upstream_update] # Trigger on upstream updates

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true # Ensure GITHUB_TOKEN for push

      - name: Check for upstream updates
        id: check
        run: |
          UPSTREAM_COMMIT=$(curl -s https://api.github.com/repos/tdlib/telegram-bot-api/commits/master | jq -r .sha)
          echo "Latest upstream commit: $UPSTREAM_COMMIT"
          LAST_COMMIT=$(cat .last_commit 2>/dev/null || echo "none")
          echo "Last known commit: $LAST_COMMIT"
          if [ "$LAST_COMMIT" != "$UPSTREAM_COMMIT" ]; then
            echo "has_new_commit=true" >> $GITHUB_OUTPUT
            echo "commit_sha=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
            echo "$UPSTREAM_COMMIT" > .last_commit
          else
            echo "has_new_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit last commit hash
        if: steps.check.outputs.has_new_commit == 'true'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .last_commit
          git commit -m "Update last known upstream commit"
          git push

      - name: Set up Docker Buildx
        if: steps.check.outputs.has_new_commit == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/setup-buildx-action@v3

      - name: Build telegram-bot-api
        if: steps.check.outputs.has_new_commit == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          docker build -t telegram-bot-api-macos-${{ matrix.arch }} \
            --build-arg TELEGRAM_API_REF=${{ steps.check.outputs.commit_sha || 'master' }} \
            --build-arg ARCH=${{ matrix.arch }} \
            -f Dockerfile .
          docker create --name temp-container telegram-bot-api-macos-${{ matrix.arch }}
          docker cp temp-container:/telegram-bot-api/bin/telegram-bot-api-${{ matrix.arch }} .
          docker rm temp-container

      - name: Verify binary
        if: steps.check.outputs.has_new_commit == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          ls -l telegram-bot-api-${{ matrix.arch }}
          file telegram-bot-api-${{ matrix.arch }}

      - name: Upload binary as artifact
        if: steps.check.outputs.has_new_commit == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-${{ matrix.arch }}
          path: telegram-bot-api-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare binaries
        run: |
          mkdir -p binaries
          mv artifacts/telegram-bot-api-arm64/telegram-bot-api-arm64 binaries/
          mv artifacts/telegram-bot-api-x86_64/telegram-bot-api-x86_64 binaries/
          ls -l binaries/

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest telegram-bot-api for macOS (Docker)
          body: |
            telegram-bot-api binaries built in Docker (may not be macOS-compatible).
            Built from commit: ${{ steps.check.outputs.commit_sha || 'master' }}
            - telegram-bot-api-arm64: For Apple Silicon (M1/M2, experimental)
            - telegram-bot-api-x86_64: For Intel Macs (experimental)
            Note: For true macOS binaries, use the native macOS workflow.
          files: |
            binaries/telegram-bot-api-arm64
            binaries/telegram-bot-api-x86_64
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on success
        if: success()
        run: |
          echo "Built and released telegram-bot-api binaries (Docker, experimental)"