name: Build and Release Telegram Bot API for macOS (Native)

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at 00:00 UTC
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_commit.outputs.should_build }}
      new_commit: ${{ steps.check_commit.outputs.new_commit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for upstream updates
        id: check_commit
        run: |
          # Fetch the latest commit from tdlib/telegram-bot-api
          git clone --depth 1 https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          NEW_COMMIT=$(git rev-parse HEAD)
          echo "Latest upstream commit: $NEW_COMMIT"

          # Check if last-built-commit.txt exists and read it
          LAST_COMMIT="none"
          if [ -f "../last-built-commit.txt" ]; then
            LAST_COMMIT=$(cat ../last-built-commit.txt)
            echo "Last built commit: $LAST_COMMIT"
          else
            echo "No previous commit file found. Treating as first build."
          fi

          # Compare commits
          if [ "$NEW_COMMIT" != "$LAST_COMMIT" ]; then
            echo "New commit detected. Proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "new_commit=$NEW_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No new commits. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "new_commit=$NEW_COMMIT" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-upstream
    if: needs.check-upstream.outputs.should_build == 'true'
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
      fail-fast: false
    outputs:
      commit_sha: ${{ steps.build_api.outputs.current_commit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for rebase before pushing

      - name: Prepare Homebrew directories
        run: |
          mkdir -p /opt/homebrew
          mkdir -p /usr/local
          chmod -R u+w /opt/homebrew /usr/local

      - name: Install Homebrew (arm64)
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          NONINTERACTIVE: 1
        run: |
          if ! command -v /opt/homebrew/bin/brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "Homebrew (arm64) already installed."
          fi
          echo "/opt/homebrew/bin:/opt/homebrew/sbin" >> $GITHUB_PATH
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: Install Homebrew (x86_64)
        if: matrix.arch == 'x86_64'
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          NONINTERACTIVE: 1
        run: |
          if ! command -v /usr/local/bin/brew &> /dev/null; then
            arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "Homebrew (x86_64) already installed."
          fi
          echo "/usr/local/bin:/usr/local/sbin" >> $GITHUB_PATH
          eval "$(/usr/local/bin/brew shellenv)"

      - name: Install dependencies (arm64)
        if: matrix.arch == 'arm64'
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
          brew install gperf cmake openssl@3 zlib

      - name: Install dependencies (x86_64)
        if: matrix.arch == 'x86_64'
        run: |
          eval "$(/usr/local/bin/brew shellenv)"
          arch -x86_64 brew install gperf cmake openssl@3 zlib

      - name: Clone and build telegram-bot-api
        id: build_api
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          if [ "$ARCH" = "arm64" ]; then
            BREW_PREFIX="/opt/homebrew"
            BINARY_NAME="telegram-bot-api-arm64"
          else
            BREW_PREFIX="/usr/local"
            BINARY_NAME="telegram-bot-api-x86_64"
          fi
          OPENSSL_DIR="$BREW_PREFIX/opt/openssl@3"
          ZLIB_DIR="$BREW_PREFIX/opt/zlib"

          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          git checkout master
          git pull
          git submodule update --init --recursive

          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Building from commit: $CURRENT_COMMIT"
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT

          rm -rf build
          mkdir build
          cd build
          if [ "$ARCH" = "x86_64" ]; then
            eval "$(/usr/local/bin/brew shellenv)"
            arch -x86_64 cmake -DCMAKE_BUILD_TYPE=Release \
                                -DOPENSSL_ROOT_DIR=$OPENSSL_DIR \
                                -DZLIB_ROOT=$ZLIB_DIR \
                                -DOPENSSL_USE_STATIC_LIBS=ON \
                                -DZLIB_USE_STATIC_LIBS=ON \
                                -DSTATIC_BUILD=ON \
                                -DCMAKE_INSTALL_PREFIX:PATH=.. ..
            arch -x86_64 cmake --build . --target install
          else
            eval "$(/opt/homebrew/bin/brew shellenv)"
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DOPENSSL_ROOT_DIR=$OPENSSL_DIR \
                  -DZLIB_ROOT=$ZLIB_DIR \
                  -DOPENSSL_USE_STATIC_LIBS=ON \
                  -DZLIB_USE_STATIC_LIBS=ON \
                  -DSTATIC_BUILD=ON \
                  -DCMAKE_INSTALL_PREFIX:PATH=.. ..
            cmake --build . --target install
          fi
          cd ../..
          mv telegram-bot-api/bin/telegram-bot-api telegram-bot-api/bin/$BINARY_NAME
          ls -l telegram-bot-api/bin/$BINARY_NAME
          file telegram-bot-api/bin/$BINARY_NAME
          otool -L telegram-bot-api/bin/$BINARY_NAME

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-${{ matrix.arch }}
          path: telegram-bot-api/bin/telegram-bot-api-${{ matrix.arch }}

      # âœ… Only one arch updates and pushes last-built-commit.txt to avoid races
      - name: Save current commit (arm64 only) and push
        if: matrix.arch == 'arm64'
        run: |
          echo "${{ steps.build_api.outputs.current_commit }}" > last-built-commit.txt

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add last-built-commit.txt
          git commit -m "Update last-built-commit.txt with commit ${{ steps.build_api.outputs.current_commit }}" || echo "No changes"

          # Rebase on latest remote to prevent non-fast-forward errors
          git fetch origin main
          git pull --rebase origin main || (git rebase --abort && exit 1)

          # Push explicitly to main
          git push origin HEAD:main

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify downloaded artifacts
        run: |
          echo "Checking for downloaded artifact directories..."
          ls -l artifacts/
          if [ ! -d "artifacts/telegram-bot-api-arm64" ]; then
            echo "Error: Artifact directory 'artifacts/telegram-bot-api-arm64' not found after download."
            exit 1
          fi
          if [ ! -d "artifacts/telegram-bot-api-x86_64" ]; then
            echo "Error: Artifact directory 'artifacts/telegram-bot-api-x86_64' not found after download."
            exit 1
          fi
          echo "Artifact directories found."

      - name: Prepare binaries
        run: |
          mkdir -p binaries
          echo "Listing downloaded artifacts structure:"
          ls -lR artifacts
          echo "---"

          # Define expected paths
          ARM64_BINARY_PATH="artifacts/telegram-bot-api-arm64/telegram-bot-api-arm64"
          X86_64_BINARY_PATH="artifacts/telegram-bot-api-x86_64/telegram-bot-api-x86_64"

          # Move binaries, checking if files exist first
          if [ -f "$ARM64_BINARY_PATH" ]; then
            mv "$ARM64_BINARY_PATH" binaries/
            echo "Moved ARM64 binary."
          else
            echo "ARM64 binary not found at $ARM64_BINARY_PATH."
          fi

          if [ -f "$X86_64_BINARY_PATH" ]; then
            mv "$X86_64_BINARY_PATH" binaries/
            echo "Moved x86_64 binary."
          else
            echo "x86_64 binary not found at $X86_64_BINARY_PATH."
          fi

          echo "Listing binaries directory contents:"
          ls -l binaries/

          # Check if the binaries directory is empty
          if [ -z "$(ls -A binaries)" ]; then
             echo "No binaries were successfully moved to the binaries/ directory. Exiting."
             exit 1
          fi

      - name: Generate timestamp tag
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +'%Y-%m-%d-%H-%M-%S')
          echo "Generated timestamp: $TIMESTAMP"
          echo "tag=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.timestamp.outputs.tag }}
          name: Release ${{ steps.timestamp.outputs.tag }} (Native macOS)
          body: |
            Native telegram-bot-api binaries for macOS (Apple Silicon and Intel), statically linked.

            Built from upstream commit: `${{ needs.build.outputs.commit_sha }}`

            - `telegram-bot-api-arm64`: For Apple Silicon (M1/M2/M3+)
            - `telegram-bot-api-x86_64`: For Intel Macs (also runs via Rosetta 2 on Apple Silicon)
          files: binaries/*
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on success
        if: success()
        run: |
          echo "Successfully built and released statically linked telegram-bot-api binaries for macOS with tag ${{ steps.timestamp.outputs.tag }}"
